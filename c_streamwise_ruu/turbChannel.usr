#include "PPICLF_USER.h"
#include "PPICLF_STD.h"
c- constants -----------------------------------------------------------

#define tSTATSTART 0 /* start time for averaging */
#define tSTATFREQ  0.05 /* output frequency for statistics */

c data extraction along wall normal direction
#define INTP_NMAX 200 /* number of sample points */
#define XCINT 1.0     /* x coordinate of 1D line*/
#define ZCINT 1.0     /* z coordinate of 1D line */

c mesh dimensions
#define BETAM 2.     /* wall normal stretching parameter */
#define PI (4.*atan(1.))
#define XLEN (4.*PI)
#define ZLEN PI
#define NUMBER_ELEMENTS_X 32
#define NUMBER_ELEMENTS_Y 22
#define NUMBER_ELEMENTS_Z 14
#define INTP_SLICE 	  0
#define INTP_NUMX 	  2000
#define INTP_NUMY         320
#define INTP_TOTP 	  INTP_NUMX*INTP_NUMY
#define INTP_ZLOC         ZLEN/2.0

#define TWO_POINTCORR     1
#define CORR_FREQ 	  100
#define INTP_PC_NUMX	  500
#define INTP_PC_NUMZ      200
#define INTP_PC_YLOC      0.0
#define INTP_PC_TOTP 	  INTP_PC_NUMZ*INTP_PC_NUMX 
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e

      utrans = 1.
      udiff  = param(2)

      if (ifield .eq. 2) then
         e = gllel(ieg)
         udiff = param(8)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ie = gllel(ieg)
      call ppiclf_solve_GetProFldIJKEF(ix,iy,iz,ie,PPICLF_P_JFX,ffx)
      call ppiclf_solve_GetProFldIJKEF(ix,iy,iz,ie,PPICLF_P_JFY,ffy)
      call ppiclf_solve_GetProFldIJKEF(ix,iy,iz,ie,PPICLF_P_JFZ,ffz)
!      call ppiclf_solve_GetProFldIJKEF(ix,iy,iz,ie,PPICLF_P_JPHIP,rphip)

      ! Make it an acceleration
      rdum = 1./vtrans(ix,iy,iz,ie,1)

      ffx = 1.0 + ffx*rdum
      ffy = ffy*rdum
      ffz = ffz*rdum

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol =  0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'ARRAY_DEF'
      include "PPICLF"

      real x0(3)
      data x0 /0.0, 0.0, 0.0/ 
      save x0

      integer icalld
      save    icalld
      data    icalld /0/

      real atime,timel
      save atime,timel

      integer beginning,rate,end
      integer ntdump
      save    ntdump

      real    rwk(INTP_NMAX,ldim+1) ! r, s, t, dist2
      integer iwk(INTP_NMAX,3)      ! code, proc, el 
      save    rwk, iwk

      save    nint, intp_h, intp_h2, intp_pc


      logical iffpts
      save iffpts

      real xint(INTP_NMAX),yint(INTP_NMAX),zint(INTP_NMAX)
      save xint, yint, zint
      common /igs_Data/ igs_x,igs_y, igs_z

      parameter(nstat=25)
      real ravg(lx1*ly1*lz1*lelt,nstat)
      real stat(lx1*ly1*lz1*lelt,nstat)
      real stat_y(INTP_NMAX*nstat)
      save ravg, stat, stat_y

      save dragx_avg

      common /rwk_intp/
     $       fwrk(lx1*ly1*lz1*lelt,ldim),
     $       fpts(ldim*INTP_TOTP),
     $       pts(3,INTP_TOTP)

      integer icalld_s
      data icalld_s /0/
      save icalld_s

      character*8 fmt
      character*7 x1

      real    rwk2(INTP_TOTP,ldim+1) ! r, s, t, dist2
      integer iwk2(INTP_TOTP,3)      ! code, proc, el
      save    rwk2, iwk2


      common /pc_rwk_intp/
     $       pc_fwrk(lx1*ly1*lz1*lelt,ldim),
     $       pc_fpts(ldim*INTP_PC_TOTP),
     $       pc_pts(3,INTP_PC_TOTP)

      real  numerator(INTP_PC_NUMX)
      real  variance(INTP_PC_NUMX)
      real  mean(INTP_PC_NUMX)
      real  numerator_f(INTP_PC_NUMX)
      real  variance_f(INTP_PC_NUMX)
      real  mean_f(INTP_PC_NUMX)
      real  ruu(INTP_PC_NUMX)

      save numerator,variance,mean,numerator_f
      save variance_f,mean_f,ruu

      integer icalld_pc
      data icalld_pc /0/
      save icalld_pc

      real    pc_rwk(INTP_PC_TOTP,ldim+1) ! r, s, t, dist2
      integer pc_iwk(INTP_PC_TOTP,3)      ! code, proc, el
      save    pc_rwk, pc_iwk

      integer counter
      save    counter

      logical ifverbose
      common /gaaa/    wo1(lx1,ly1,lz1,lelv)
     &              ,  wo2(lx1,ly1,lz1,lelv)
     &              ,  wo3(lx1,ly1,lz1,lelv)




      common /ugradtens/
     & vxx(lx1,ly1,lz1,lelt),
     & vxy(lx1,ly1,lz1,lelt),
     & vxz(lx1,ly1,lz1,lelt),
     & vyx(lx1,ly1,lz1,lelt),
     & vyy(lx1,ly1,lz1,lelt),
     & vyz(lx1,ly1,lz1,lelt),
     & vzx(lx1,ly1,lz1,lelt),
     & vzy(lx1,ly1,lz1,lelt),
     & vzz(lx1,ly1,lz1,lelt)

c       Placeholder for kinematic viscosity
      real kinematicViscosity
      real tplus
      real tmn, tmx

      integer bIDs(1)
      save iobj_wall

      real my_ffx(PPICLF_LEX,PPICLF_LEY,PPICLF_LEZ,lelt)

      do ie=1,nelt
      do iz=1,PPICLF_LEZ
      do iy=1,PPICLF_LEY
      do ix=1,PPICLF_LEX
         call ppiclf_solve_GetProFldIJKEF(ix,iy,iz,ie
     >                              ,PPICLF_P_JFX,my_ffx(ix,iy,iz,ie))
      enddo
      enddo
      enddo
      enddo

!      call create_particles(npart,y,rprop)
      ! Add them into solver
!      call ppiclf_solve_AddParticles(npart,y,rprop)

      ! Set divergence equal to -1/phi_f * D/Dt( phi_f )
!      call qtl_pvol(usrdiv,rphip)
      ! Set divergence at outflow elements so that characteristics go out
!      call fill_div(usrdiv)

      ! Compute velocity gradients
       call gradm1(vxx,vxy,vxz,vx)
       call gradm1(vyx,vyy,vyz,vy)
       call gradm1(vzx,vzy,vzz,vz)

      ! Interpolate fields to particle positions
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JUX
     >                          ,vx(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JUY
     >                          ,vy(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JUZ
     >                          ,vz(1,1,1,1))


      
      ! Interpolation of VGT
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVXX
     >                          ,vxx(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVXY
     >                          ,vxy(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVXZ
     >                          ,vxz(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVYX
     >                          ,vyx(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVYY
     >                          ,vyy(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVYZ
     >                          ,vyz(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVZX
     >                          ,vzx(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVZY
     >                          ,vzy(1,1,1,1))
      call ppiclf_solve_InterpFieldUser(PPICLF_R_JVZZ
     >                          ,vzz(1,1,1,1))

      ! Integrate Particles
      call ppiclf_solve_IntegrateParticle(istep ,
     >                                    iostep,
     >                                    dt    ,
     >                                    time  )

      iostep = 1000

      n     = nx1*ny1*nz1*nelv
      nelx  = NUMBER_ELEMENTS_X
      nely  = NUMBER_ELEMENTS_Y
      nelz  = NUMBER_ELEMENTS_Z

c     Define the kinematic viscosity
      kinematicViscosity = param(2)/param(1)  !param(2) = mu and param(1) = rho

      if (istep.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall,bIDs,1)
         nm = iglsum(nmember(iobj_wall),1)
         if(nid.eq.0) write(6,*) 'obj_wall nmem:', nm 
         call prepost(.true.,'  ')
      endif

      ubar = glsc2(vx,bm1,n)/volvm1
      e2   = glsc3(vy,bm1,vy,n)+glsc3(vz,bm1,vz,n)
      e2   = e2/volvm1
      if (nfield.gt.1) then
        tmn  = glmin(t,n)
        tmx  = glmax(t,n)
      endif
      if(nid.eq.0) write(6,2) time,ubar,e2,tmn,tmx
   2               format(1p5e13.4,' monitor')


c
c     Write Wall Shear Sress
c

c     Open up the file
      if(icalld.eq.0) then
        rho    = param(1)
        dnu    = param(2)
	open(unit=58,file='wall_shear_stress.dat')
         write(58,'(A,1pe14.7)') '#time = ', time
         write(58,'(A)')
     $    '#  y    y+    uu    vv    ww    uv    tt    ut    -vt'

      endif

c     Compute the wall shear stress
      call torque_calc(1.0,x0,.false.,.false.) ! compute wall shear

      rho    = param(1)
      dnu    = param(2)
      tw     = dragx(iobj_wall) / (2*XLEN*ZLEN)
      u_tau  = sqrt(ABS(tw / rho))
      

c     Write the file
         write(58,3)
     &           time,
     &           u_tau, 
     & 	         ubar

	
c     Close the file
      if (time.eq.param(10)) then
	close(58)
      endif 

c
c     Conclude Edit
c
      if (time.lt.tSTATSTART) return


c
c     What follows computes some statistics ...
c

      if(ifoutfld) then
        if (ldimt.ge.2) call lambda2(t(1,1,1,1,2))
        if (ldimt.ge.3) call comp_vort3(t(1,1,1,1,3),wo1,wo2,vx,vy,vz)
      endif

    
      if(icalld.eq.0) then
        if(nid.eq.0) write(6,*) 'Start collecting statistics ...'

        nxm = 1 ! mesh is linear
        call interp_setup(intp_h,0.0,nxm,nelt)
        nint = 0
        if (nid.eq.0) then
          nint = INTP_NMAX
          call cfill(xint,XCINT,size(xint))
          do i = 1,INTP_NMAX 
             yi = (i-1.)/(INTP_NMAX-1)
             yint(i) = tanh(BETAM*(2*yi-1))/tanh(BETAM)
          enddo
          call cfill(zint,ZCINT,size(zint))
        endif
        iffpts = .true. ! dummy call to find points
        call interp_nfld(stat_y,ravg,1,xint,yint,zint,nint,
     $                   iwk,rwk,INTP_NMAX,iffpts,intp_h)
        iffpts = .false.

c Aks       call gtpp_gs_setup(igs_z,nelx*nely,nelz,1   ,3) ! y-avg
c Aks        call gtpp_gs_setup(igs_x,nelx     ,nely,nelz,1) ! x-avg

        call gtpp_gs_setup(igs_x,nelx     ,nely,nelz,1) ! x-avx
        call gtpp_gs_setup(igs_z,nelx*nely,1   ,nelz,3) ! z-avg

        call rzero(ravg,size(ravg))
        dragx_avg = 0
        atime     = 0
        timel     = time
        ntdump    = int(time/tSTATFREQ)

        icalld = 1
      endif

      dtime = time - timel
      atime = atime + dtime

      ! averaging over time
      if (atime.ne.0. .and. dtime.ne.0.) then
        beta      = dtime / atime
        alpha     = 1. - beta

        ifverbose = .false.
        call avg1(ravg(1,1),vx   ,alpha,beta,n,'uavg',ifverbose)
        call avg2(ravg(1,2),vx   ,alpha,beta,n,'urms',ifverbose)
        call avg2(ravg(1,3),vy   ,alpha,beta,n,'vrms',ifverbose)
        call avg2(ravg(1,4),vz   ,alpha,beta,n,'wrms',ifverbose)
        call avg3(ravg(1,5),vx,vy,alpha,beta,n,'uvmm',ifverbose)

        call avg1(ravg(1,6),t    ,alpha,beta,n,'tavg',ifverbose)
        call avg2(ravg(1,7),t    ,alpha,beta,n,'trms',ifverbose)
        call avg3(ravg(1,8),vx,t ,alpha,beta,n,'utmm',ifverbose)
        call avg3(ravg(1,9),vy,t ,alpha,beta,n,'vtmm',ifverbose)

        call torque_calc(1.0,x0,.false.,.false.) ! compute wall shear
        dragx_avg = alpha*dragx_avg + beta*dragx(iobj_wall)

c----								-------
c----			Slice Interpolation 			-------
c----								-------
c--------- Set up Interpolating Slice ---------------------------------

        if (icalld_s.eq.0 .and. INTP_SLICE) then
          icalld_s = 1
          call interp_setup(intp_h2,0.0,0,nelt)

          ! Define interpolating slice
          do i=1,INTP_NUMX
            do j=1,INTP_NUMY
                   index   = (i-1)*(INTP_NUMY) + j
                   pts(1,index) =  FLOAT(i) / FLOAT(INTP_NUMX)*XLEN
                   pts(2,index) = -1.0 + FLOAT(j-1) / FLOAT(INTP_NUMY-1)*2.0
                   pts(3,index) = INTP_ZLOC
              enddo
            enddo
        endif

c--------- Interpolate slice ------------------------------------------
      if (mod(istep,iostep) .eq. 0 .and. INTP_SLICE) then
	call opcopy(fwrk(1,1),fwrk(1,2),fwrk(1,3),
     &                 vx,vx,vx)

	call interp_nfld(fpts,fwrk(1,3),1,pts(1,:),pts(2,:)
     &                ,pts(3,:),INTP_TOTP,iwk2,rwk2,INTP_TOTP,
     &                .true.,intp_h2)

        fmt = '(I7.7)'
        write (x1,fmt) istep
        open(unit=64, file='slice_visual'//trim(x1))
        if (nid .eq. 0) then
                write(64,*) 'TOTP', INTP_TOTP,INTP_NUMX,
     &           INTP_NUMY,'x, y, u',pts(1,:),pts(2,:),fpts
        endif



        	
	  
      endif

c----                                                           -------
c----                   End Slice Interpolation                 -------
c----                                                           -------

c----                                                           -------
c----                   Begin Two point Correlation             -------
c----                                                           -------
c--------- Set up Correlation Slice ---------------------------------

        if (icalld_pc.eq.0 .and. TWO_POINTCORR) then
          icalld_pc = 1
          call interp_setup(intp_pc,0.0,0,nelt)

          ! Define interpolating slice
          do i=1,INTP_PC_NUMZ
            do j=1,INTP_PC_NUMX
                   index           =  (i-1)*(INTP_PC_NUMX) + j
                   pc_pts(1,index) =  FLOAT(j-1) / FLOAT(INTP_PC_NUMX-1)
     &                                *XLEN
                   pc_pts(2,index) =  INTP_PC_YLOC
                   pc_pts(3,index) =  FLOAT(i-1) / FLOAT(INTP_PC_NUMZ-1)
     &                                *ZLEN
	    
              enddo
            enddo
        endif
c--------- Correlation slice ------------------------------------------
      if (mod(istep,CORR_FREQ) .eq. 0 TWO_POINTCORR) then

        call opcopy(pc_fwrk(1,1),pc_fwrk(1,2),pc_fwrk(1,3),
     &                 vx,vx,vx)


        call interp_nfld(pc_fpts,pc_fwrk(1,3),1,pc_pts(1,:),
     &                pc_pts(2,:),pc_pts(3,:),INTP_PC_TOTP,pc_iwk,
     &                pc_rwk,INTP_PC_TOTP,.true.,intp_pc)




c -- Need a mean for two point correlation
        do i=1,INTP_PC_NUMZ
                f_ind = (i-1)*INTP_PC_NUMX + 1
                do j = 1,INTP_PC_NUMX
                        index   = (i-1)*INTP_PC_NUMX+j
                        mean(j)       = mean(j)
     &                             + pc_fpts(index)
               enddo
               counter         = counter + 1
        enddo

        do j=1,INTP_PC_NUMX
                mean_f(j)      = mean(j)  / FLOAT(counter)
        enddo

c -- Perform two point correlation
        do i=1,INTP_PC_NUMZ
	 	f_ind = (i-1)*INTP_PC_NUMX + 1	
                do j = 1,INTP_PC_NUMX
			index 	= (i-1)*INTP_PC_NUMX+j
                        numerator(j)  = numerator(j)
     &                             + (pc_fpts(f_ind)-mean_f(j))
     &				    *(pc_fpts(index)-mean_f(j))
                        variance(j)   = variance(j) 
     &                             + (pc_fpts(index)-mean_f(j))**2
               enddo
        enddo


        do j=1,INTP_PC_NUMX
                numerator_f(j)          = numerator(j) / FLOAT(counter)
                variance_f(j)           = variance(j)  / FLOAT(counter)
		variance_f(j) 		= variance_f(j)**(0.5)
        enddo

        do j=1,INTP_PC_NUMX
                ruu(j)                  = numerator_f(j)  
     &                       / (variance_f(1)*variance_f(j))
        enddo

        open(unit=65, file='ruu_streamwise', status='replace')
          write(65,'(A)')
     &       '# x ruu'

       do i = 1,INTP_PC_NUMX
               write(65,3)
     &         pc_pts(1,i) / param(2),
     &         ruu(i)

       enddo
       close(65)
      endif

c----                                                           -------
c----                   End Two Point Correlation               -------
c----                                                           -------


c--------- Begin Turbulent Energy -------------------------------------

        call    computeUFluc()
        call gradm1(dudxp,dudyp,dudzp,ua)                 !This is the capital dU_1/dx_j MEAN VELOCITY GRADIENT
  
        !The ones below are all du'_i/dx_j (fluctuation)
  
        call gradm1(dudx,dudy,dudz,vx)                  !u' = u(t) - u_avg(t)
        call gradm1(dvdx,dvdy,dvdz,vy)                  !v'=v
        call gradm1(dwdx,dwdy,dwdz,vz)                  !w'=w
  
        dudx2 = dudx*dudx                                               !dudx^2
        dvdx2 = dvdx*dvdx                                               !dvdx^2
        dwdx2 = dwdx*dwdx                                               !dwdx^2
  
        dudy2 = dudy*dudy                                               !dudy^2
        dvdy2 = dvdy*dvdy                                               !dvdy^2
        dwdy2 = dwdy*dwdy                                               !dwdy^2
  
        dudz2 = dudz*dudz                                               !dudz^2
        dvdz2 = dvdz*dvdz                                               !dvdz^2
        dwdz2 = dwdz*dwdz                                               !dwdz^2
        
        ifverbose = .false.
        call avg1(ravg(1,10),vx   ,alpha,beta,n,'uavg',ifverbose)
         
        call avg1(ravg(1,11),uf,alpha,beta,n,'upavg',ifverbose)                                  !u'
        call avg1(ravg(1,12),vy   ,alpha,beta,n,'vpavg',ifverbose)                               !v'=v because vbar=0
        call avg1(ravg(1,13),vz   ,alpha,beta,n,'upavg',ifverbose)                               !w'=w because wbar=0
         
        call avg2(ravg(1,14),uf,alpha,beta,n,'upupavg',ifverbose)                                !u'u'
        call avg2(ravg(1,15),vy   ,alpha,beta,n,'vpvpavg',ifverbose)                     !v'v'
        call avg2(ravg(1,16),vz   ,alpha,beta,n,'wpwpavg',ifverbose)                     !w'w'
        call avg3(ravg(1,17),uf,vy,alpha,beta,n,'upvpavg',ifverbose)                     !u'v'
        call avg3(ravg(1,18),uf,vz,alpha,beta,n,'upwpavg',ifverbose)                     !u'w'
        call avg3(ravg(1,19),vy,vz,alpha,beta,n,'vpwpavg',ifverbose)                     !v'w'  
  
        call avg1(dudx2a,dudx2   ,alpha,beta,n,'dudxa',ifverbose)                               
        call avg1(dvdx2a,dvdx2   ,alpha,beta,n,'dvdxa',ifverbose)                               
        call avg1(dwdx2a,dwdx2   ,alpha,beta,n,'dwdxa',ifverbose)                               
  
        call avg1(dudy2a,dudy2   ,alpha,beta,n,'dudya',ifverbose)                               
        call avg1(dvdy2a,dvdy2   ,alpha,beta,n,'dvdya',ifverbose)                               
        call avg1(dwdy2a,dwdy2   ,alpha,beta,n,'dwdya',ifverbose)                               
         
        call avg1(dudz2a,dudz2   ,alpha,beta,n,'dudza',ifverbose)                               
        call avg1(dvdz2a,dvdz2   ,alpha,beta,n,'dvdza',ifverbose)                               
        call avg1(dwdz2a,dwdz2   ,alpha,beta,n,'dwdza',ifverbose)                               
 
        sum = dudx2a+dvdx2a+dwdx2a+dudy2a+dvdy2a+dwdy2a+dudz2a+dvdz2a+dwdz2a
c 	sum  = dudy 
   
          call avg1(ravg(1,20),sum,alpha,beta,
     $  n,'dissipation',ifverbose)

        call avg1(ravg(1,21),uf*vy,alpha,beta,n,'Pk',ifverbose)

c------Pressure related Diffusion -------------------------------------
        call gradm1(dpufdx,dpufdy,dpufdz,pr*uf)
        call gradm1(dpvydx,dpvydy,dpvydz,pr*vy)
        call gradm1(dpvzdx,dpvzdy,dpvzdz,pr*vz)

	sum = dpufdx + dpvydy + dpvzdz

        call avg1(ravg(1,22),sum,alpha,beta,n,'pd',ifverbose) 

c------Viscous related Diffusion --------------------------------------
        call gradm1(dufufdx,dufufdy,dufufdz,uf*uf)
        call gradm1(dum1,d2ufuf_dy2,dum2,dufufdy)

        call gradm1(dvyvydx,dvyvydy,dvyvydz,vy*vy)
        call gradm1(dum1,d2vyvy_dy2,dum2,dvyvydy)

        call gradm1(dvzvzdx,dvzvzdy,dvzvzdz,vz*vz)
        call gradm1(dum1,d2vzvz_dy2,dum2,dvzvzdy)

        sum = d2ufuf_dy2 + d2vyvy_dy2 + d2vzvz_dy2

        call avg1(ravg(1,23),sum,alpha,beta,n,'vd',ifverbose)

c------Turbulent Diffusion --------------------------------------
        call gradm1(dum1,dufufvydy,dum2,uf*uf*vy)
        call gradm1(dum1,dvyvyvydy,dum2,vy*vy*vy)
        call gradm1(dum1,dvzvzvydy,dum2,vz*vz*vy)

        sum = dufufvydy + dvyvyvydy + dvzvzvydy

        call avg1(ravg(1,24),sum,alpha,beta,n,'td',ifverbose)





      endif
c--------- End Turbulent Energy   -------------------------------------
      timel = time

      ! write statistics to file
      if(istep.gt.0 .and. time.gt.(ntdump+1)*tSTATFREQ) then
         ! averaging over statistical homogeneous directions (x-z)

         do i = 1,nstat
            call planar_avg(wo1      ,ravg(1,i),igs_x)
            call planar_avg(stat(1,i),wo1      ,igs_z)
         enddo
         
         if (nfield.gt.1) then
            ! evaluate d<T>/dy at the lower wall
            call opgrad(wo1,wo2,wo3,stat(1,6))
            call dssum(wo2,lx1,ly1,lz1)
            call col2(wo2,binvm1,n)
            call interp_nfld(stat_y,wo2,1,xint,yint,zint,nint,
     $                       iwk,rwk,INTP_NMAX,iffpts,intp_h)
            dTdy_w = stat_y(1)
         else
            dTdy_w = 1.
         endif

         ! extract data along wall normal direction (1D profile)
         call interp_nfld(stat_y,stat,nstat,xint,yint,zint,nint,
     $                    iwk,rwk,INTP_NMAX,iffpts,intp_h)

         ntdump = ntdump + 1
         if (nid.ne.0) goto 998 

         rho    = param(1)
         dnu    = param(2)
         A_w    = 2 * XLEN * ZLEN
         tw     = dragx_avg / A_w
         u_tau  = sqrt(ABS(tw / rho))
         print*, u_tau
         qw     = -param(8) * dTdy_w
         t_tau  = 1/u_tau * qw
         Re_tau = u_tau / dnu
         tplus  = time * u_tau**2 / dnu

         write(6,*) 'Dumping statistics ...', Re_tau, t_tau
 
         open(unit=56,file='vel_fluc_prof.dat')
         write(56,'(A,1pe14.7)') '#time = ', time
         write(56,'(A)') 
     $    '#  y    y+ uu vv ww uv D P Pd Vd Td'

         open(unit=57,file='mean_prof.dat')
         write(57,'(A,1pe14.7)') '#time = ', time
         write(57,'(A)') 
     $    '#  y    y+    Umean    Tmean Re_tau uu vv'

         do i = 1,nint
            yy = 1+yint(i)
            write(56,3) 
     &           yy,
     &           yy*Re_tau,
     &           (stat_y(1*nint+i)-(stat_y(0*nint+i))**2)/u_tau**2,
     &           stat_y(2*nint+i)/u_tau**2,
     &           stat_y(3*nint+i)/u_tau**2,
     &           stat_y(4*nint+i)/u_tau**2,
     &           kinematicViscosity*stat_y(19*nint+i),       !Dissipation
     &           stat_y(20*nint+i),                          !Production
     &           stat_y(21*nint+i),                          !Pressure related diffusion
     &           stat_y(22*nint+i),                          !Viscous  related diffusion
     &           stat_y(23*nint+i)                           !Turbulent diffusion

            write(57,3) 
     &           yy,
     &           yy*Re_tau, 
     &           stat_y(0*nint+i)/u_tau,
     &           stat_y(5*nint+i)/t_tau,
     &           Re_tau,
     &           stat_y(13*nint+i),
     &           stat_y(14*nint+i)

  3         format(1p15e17.9)
         enddo
         close(56)
         close(57)


 998  endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      if (y.lt.0) temp = 1.0
      if (y.gt.0) temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer idum
      save    idum 
      data    idum / 0 /

      real C, k, kx, ky

      Re_tau = 550 
      C      = 5.17
      k      = 0.41

      yp = (1-y)*Re_tau
      if (y.lt.0) yp = (1+y)*Re_tau
      
      ! Reichardt function
      ux  = 1/k*log(1+k*yp) + (C - (1/k)*log(k)) *
     $      (1 - exp(-yp/11) - yp/11*exp(-yp/3))
      ux  = ux * Re_tau*param(2)*0.4

      eps = 1e-2*50
      kx  = 23
      kz  = 13

      alpha = kx * 2*PI/XLEN
      beta  = kz * 2*PI/ZLEN 

      ! add perturbation to trigger turbulence 
      ux  = ux  + eps*beta  * sin(alpha*x)*cos(beta*z) 
      uy  =       eps       * sin(alpha*x)*sin(beta*z)
      uz  =      -eps*alpha * cos(alpha*x)*sin(beta*z)

      ux = 0.0
      uy = 0.0
      uz = 0.0

      ! thin boundary layer at the lower wall
      gamma = 5e-6 ! initial thickness
      temp = erfc((1+y)/sqrt(1./param(8) * gamma))

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      n = nelv * 2**ldim
      xmin = glmin(xc,n)
      xmax = glmax(xc,n)
      ymin = glmin(yc,n)
      ymax = glmax(yc,n)
      zmin = glmin(zc,n)
      zmax = glmax(zc,n)

      xscale = XLEN/(xmax-xmin)
      yscale = 1./(ymax-ymin)
      zscale = ZLEN/(zmax-zmin)

      do i=1,n
         xc(i,1) = xscale*xc(i,1)
         yc(i,1) = yscale*yc(i,1)
         yc(i,1) = tanh(BETAM*(2*yc(i,1)-1))/tanh(BETAM)
         zc(i,1) = zscale*zc(i,1)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      real*8 rdum,ksp,erest
      common /ucollision/ ksp,erest
      data ksp   /1000000.0/ ! note: this limits dt, whcih we explicity set in .par file
      data erest /1.0/
      external ran2
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal

      real*8 y(PPICLF_LRS    , PPICLF_LPART) ! Normal ordering
      real*8 rprop(PPICLF_LRP, PPICLF_LPART) ! Normal ordering

      real*8 dp,rhop,lx,rrx,rly,rry,rlz,rrz,rspace
      integer*4 imethod,iendian,nmain,noff,nrow,npart

      ! Pass to library to Init MPI
      call ppiclf_comm_InitMPI(nekcomm,
     >                         nid    , ! nid already defined in Nek5000
     >                         np     ) ! np already defined in Nek5000

   
!tz
      npart   = 0
      imethod = 1
      iendian = 0

      ! Restart from file
      call ppiclf_io_ReadParticleVTU("par00006.vtu")

      rlx     =  0.0
      rrx     =  4*PI
      rly     =  -1
      rry     =  1
      rlz     =  0.0
      rrz     =  PI
      dp      = 0.002357023
      call ppiclf_solve_InitParticle(imethod   ,
     >                               ndim      ,
     >                               iendian   ,
     >                               npart     ,
     >                               dummy    ,
     >                               dummy)

!      call ppiclf_solve_InitTargetBins('y',8,1)

      ! Specify Gaussian filter
      call ppiclf_solve_InitGaussianFilter(8.0*dp,1E-3,1)

      ! Specify Overlap Mesh
      call ppiclf_comm_InitOverlapMesh(nelt,lx1,ly1,lz1,xm1,ym1,zm1)

      ! Specify neighbor bin size
      call ppiclf_solve_InitNeighborBin(dp)

      ! Add a bottom wall boundary
      call ppiclf_solve_InitWall( 
     >                 (/ 0.0,-1.0,0.0/),
     >                 (/ 12.56,-1.0,0.0/),
     >                 (/ 12.56,-1.0,3.14/))

      call ppiclf_solve_InitWall(
     >                 (/ 0.0,-1.0,0.0/),
     >                 (/ 0.0,-1.0,3.14/),
     >                 (/ 12.56,-1.0,3.14/))


      ! Add a top wall boundary
      call ppiclf_solve_InitWall(
     >                 (/ 0.0,1.0,0.0/),
     >                 (/ 12.56,1.0,0.0/),
     >                 (/ 12.56,1.0,3.14/))

      call ppiclf_solve_InitWall(
     >                 (/ 0.0,1.0,0.0/),
     >                 (/ 0.0,1.0,3.14/),
     >                 (/ 12.56,1.0,3.14/))


      print*, "Initialising Periodicty"
      ! Set left and right boundaries to periodic
      call ppiclf_solve_InitPeriodicX(rlx,rrx)
      call ppiclf_solve_InitPeriodicZ(rlz,rrz)
      print*, "Finished Periodicity"
      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'W  ') boundaryID(ifc,iel) = 1 
         cbc(ifc,iel,2) = cbc(ifc,iel,1) 
         if (cbc(ifc,iel,1) .eq. 'W  ') cbc(ifc,iel,2) = 't  '
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      param(54) = 0.0 ! use >0 for const flowrate or <0 bulk vel
                      ! flow direction is given by (1=x, 2=y, 3=z) 
      param(55) = 0.0 ! flowrate/bulk-velocity 

      return
      end
c-----------------------------------------------------------------------
      real*8 FUNCTION ran2(idum)
      INTEGER*4 idum,IM1,IM2,IMM1,IA1,IA2,IQ1,IQ2,IR1,IR2,NTAB,NDIV
      REAL*8 AM,EPS,RNMX
      PARAMETER (IM1=2147483563,IM2=2147483399,AM=1./IM1,IMM1=IM1-1,
     $        IA1=40014,IA2=40692,IQ1=53668,IQ2=52774,IR1=12211,
     $        IR2=3791,NTAB=32,NDIV=1+IMM1/NTAB,EPS=1.2e-7,RNMX=1.-EPS)
c Long period (> 2 ! 1018 ) random number generator of L’Ecuyer with
c Bays-Durham shufle and added saeguards. Returns a uniform random deviate
c between 0.0 and 1.0 (exclusive of the endpoint values).
c Call with idum a negative integer to initialize; thereafter, do not alter
c idum between successive deviates in a sequence. RNMX should approximate the
c largest floating value that is less than 1.
      INTEGER*4 idum2,j,k,iv(NTAB),iy
      SAVE iv,iy,idum2
      DATA idum2/123456789/, iv/NTAB*0/, iy/0/
      if (idum.le.0) then
         idum1=max(-idum,1)
         idum2=idum1
         do j=NTAB+8,1,-1
            k=idum1/IQ1
            idum1=IA1*(idum1-k*IQ1)-k*IR1
            if (idum1.lt.0) idum1=idum1+IM1
            if (j.le.NTAB) iv(j)=idum1
         enddo
         iy=iv(1)
      endif
      k=idum1/IQ1
      idum1=IA1*(idum1-k*IQ1)-k*IR1
      if (idum1.lt.0) idum1=idum1+IM1
      k=idum2/IQ2
      idum2=IA2*(idum2-k*IQ2)-k*IR2
      if (idum2.lt.0) idum2=idum2+IM2
      j=1+iy/NDIV
      iy=iv(j)-idum2
      iv(j)=idum1
      if(iy.lt.1)iy=iy+IMM1
      ran2=min(AM*iy,RNMX)
      return
      END
c-----------------------------------------------------------------------
      subroutine fill_div(div)
c
c     Fill the domain with a nontrivial divergence, where desired.
c
c
      include 'SIZE'
      include 'TOTAL'
c
      integer icalld
      save    icalld
      data    icalld  /0/
c
      common /cvflow_d/ dist(lx2,ly2,lz2,lelt),dmax
      common /cvflow_l/ ifdivf
      logical ifdivf
c
      real div(lx2,ly2,lz2,lelv)
c
      ntot2 = nx2*ny2*nz2*nelv
c     call rzero(div,ntot2)
      if (ifdivf) return
c
      if (icalld.eq.0) then
         icalld = 1
         call set_outflow_dist
      endif
      dmax2 = dmax*dmax
c
      call get_div_const(cdiv)
c
      nd    = 0
      do i=1,ntot2
         dd = dist(i,1,1,1)*dist(i,1,1,1)
         dd = min(dmax2,dd)
         if (dist(i,1,1,1).ne.0) div(i,1,1,1) = cdiv*(1-dd/dmax2)
         if (dist(i,1,1,1).ne.0) nd = nd+1
      enddo
      dsmin = glmin(dist,ntot2) 
      dsmax = glmax(dist,ntot2) 
      dvmin = glmin(div,ntot2) 
      dvmax = glmax(div,ntot2) 
      xd    = nd
      xd    = glsum(xd,1)
      nd    = xd
      if(nid.eq.0)write(6,1) istep,nd,dvmin,dvmax,dsmin,dsmax,cdiv,dmax2
    1 format(2i9,1p6e11.3,'divmnmx')
    2 format(2i9,1p2e11.3,'divdstm')
c
      return
      end
c-----------------------------------------------------------------------
      subroutine set_outflow_dist
c
c     Compute projected normal distance from outflow
c
      include 'SIZE'
      include 'TOTAL'
c
      common /cvflow_d/ dist(lx2,ly2,lz2,lelt),dmax
c
      integer e,f
c
c
      nxyz2 = nx2*ny2*nz2
      ntot2 = nx2*ny2*nz2*nelv
      ntot1 = nx1*ny1*nz1*nelv
c
      call rzero(dist,ntot2)
      davg = 0.
      wavg = 0.
c
      zmax = glmax(ym1,ntot1)
c
      do e=1,nelv
c       write(6,*) 'any', cbc(3,e,1)
         if (cbc(3,e,1).eq.'O  ') then  ! Outflow at y+
            do k=1,nxyz2
               dist(k,1,1,e) = zmax-ym1(k,1,1,e)
               davg = davg+dist(k,1,1,e)
               wavg = wavg+1.0
            enddo
         endif
      enddo
      dmax = glmax(dist,ntot2)
      davg = glsum(davg,1)
      wavg = glsum(wavg,1)
      if (wavg.gt.0) davg = davg/wavg
      if (nid.eq.0) write(6,1) dmax,davg,wavg
    1 format('div: davg:',1p3e12.4)
      dmax = 0.5*(dmax+davg)
c
      return
      end
c-----------------------------------------------------------------------
      subroutine get_div_const(cdiv)
c
c     Get constant multiplier for divergence
c
      include 'SIZE'
      include 'TOTAL'
c
      common /cvflow_d/ dist(lx2,ly2,lz2,lelt),dmax
      real flx(0:2)
c
      integer e,f

      vnmo_desired  = 2.

      cdivt         = 1.5*vnmo_desired/dmax
      cdiv          = max(0.,cdivt)       ! No contraction!

      if (nid.eq.0) write(6,1) istep,time,vnmo,dmax,cdiv,cdivt
    1 format(i9,1p5e13.5,'  cdiv')

      return
      end
c-----------------------------------------------------------------------
      subroutine qtl_pvol(divin,phipin)
c
c     Computes modified divergence constraint for multiphase dense
c     incompressible flow
c
      include 'SIZE'
      include 'TOTAL'

      common /phig_qtl_blk/ phig_last
      real phig_last(lx1,ly1,lz1,lelt)

      real divin(lx2,ly2,lz2,lelv), phipin(lx1,ly1,lz1,lelt)

      COMMON /SCRNS/ ur(lx1,ly1,lz1,lelt)
     >              ,us(lx1,ly1,lz1,lelt)
     >              ,ut(lx1,ly1,lz1,lelt)
     >              ,phigin(lx1,ly1,lz1,lelt)
     >              ,phig_qtl(lx1,ly1,lz1,lelt)
     >              ,grad_dot(lx1,ly1,lz1,lelt)

      integer icalld
      save    icalld
      data    icalld  /-1/

      icalld = icalld + 1
      nxyze = lx1*ly1*lz1*lelt

      rdt_in = 1./dt

      call rzero(phig_qtl,nxyze)

      if (icalld .eq. 0) then
         call rone(phig_last,nxyze)
         call sub2(phig_last,phipin,nxyze)
      endif

      call rone(phigin,nxyze)
      call sub2(phigin,phipin,nxyze)
      
c     if (icalld .lt. 5) goto 123

      call gradm1(ur,us,ut,phigin)
      call sub3(phig_qtl,phigin,phig_last,nxyze)
      call cmult(phig_qtl,rdt_in,nxyze)
      call vdot3(grad_dot,vx,vy,vz,ur,us,ut,nxyze)
      call add2(phig_qtl,grad_dot,nxyze)
      call invcol2(phig_qtl,phigin,nxyze)
      call chsign(phig_qtl,nxyze)

      call copy(phig_last,phigin,nxyze)

      do ie=1,nelt
         call map12(divin(1,1,1,ie),phig_qtl(1,1,1,ie),ie)
      enddo

      return
      end
!-----------------------------------------------------------------------
        subroutine      computeUFluc()

        include 'SIZE'
        include 'TOTAL'

c       Define the u' component and make it a common datablock
        common /compUFluc/ uf(lx1,ly1,lz1,lelt)         !This is the u' velocity
     $                  ,ua(lx1,ly1,lz1,lelt)           !This is the mean velocity

        common /igs_Data/ igs_x, igs_y, igs_z                  !Common dataset from gtpp_gs_setup

c       Work array which is used in the planar average routine (Not shared elsewhere)
      real work(lx1,ly1,lz1,lelt)

c       Since this subroutine is called after gtpp_gs_setup is done
c       We can simple use it to compute the planar average first and then compute fluc

        call planar_avg(work,vx,igs_x)          !Average in x
        call planar_avg(ua,work,igs_z)          !Average in y

c        do i=1,nx1*ny1*nz1*nelv
c            print*, "ua:",i, ua(i,1,1,1)
c            print*, "vx:",i, vx(i,1,1,1)
c        enddo

c       Compute the fluctuating component
        do i=1,nx1*ny1*nz1*nelv
            uf(i,1,1,1) = vx(i,1,1,1) - ua(i,1,1,1)      !ua Averaged in homogeneous directions
      enddo

        return
        end
c-----------------------------------------------------------------------
      subroutine create_particles(npart,y,rprop)

      include 'SIZE'
      include 'TOTAL'
      real*8 y(PPICLF_LRS    , PPICLF_LPART) ! Normal ordering
      real*8 rprop(PPICLF_LRP, PPICLF_LPART) ! Normal ordering

      real*8 dp,rhop,r,rdum
      integer*4 imethod,iendian,nmain,noff,nrow,npart

      integer icalld
      save icalld
      data icalld /0/

   ! Set initial conditions and parameters for particles
      dp      = 0.00527
      rhop    = 10000.0
      rdp     = 1.01*dp ! extra threshold when initially placed
      rlx     =  0.0
      rrx     =  4*PI
      rly     =  -1
      rry     =  1
      rlz     =  0.0
      rrz     =  PI
      nmain   = 3
      noff    = nmain
      rspace  = sqrt(0.75d0)*rdp
      nrow    = 0
      if (nid .eq. 0) 
     >nrow = 1
      if (nid .eq. 1)
     >nrow = 1
      if (nid .eq. 2)
     >nrow = 1
      if (nid .eq. 3)
     >nrow = 1
      if (nid .eq. 4)
     >nrow = 1
      if (nid .eq. 5)
     >nrow = 1
      if (nid .eq. 6)
     >nrow = 1
      
      npart   = 0
      ! the loop below will place particles in a nearly bcc packing
      ! on nid == 0. We could have done in parallel but for the few
      ! particles in this case rank 0 is fine
      do i=1,nrow
         ! main rows
         do j=1,nmain
               rdum     = ran2(2)
               npart = npart + 1
               y(PPICLF_JX,npart)  = rdum*0.1
               y(PPICLF_JY,npart)  = rdum*0.1
	       y(PPICLF_JZ,npart)  = rdum*0.1
               y(PPICLF_JVX,npart) = 15.0
               y(PPICLF_JVY,npart) = ((FLOAT(nid)+1.0)/8.0)

               rprop(PPICLF_R_JRHOP,npart) = rhop
               rprop(PPICLF_R_JDP  ,npart) = dp
               rprop(PPICLF_R_JVOLP,npart) = pi/6.0*dp**3
         enddo
      enddo
      imethod = 1
      iendian = 0
!     ndim    = 2 ! ndim already defined in Nek5000
      print*, "npart"
      print*, npart

      return
      end
